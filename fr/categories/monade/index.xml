<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Monade on Simon Désaulniers</title>
    <link>https://sim590.github.io/fr/categories/monade/</link>
    <description>Recent content in Monade on Simon Désaulniers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <managingEditor>sim.desaulniers@gmail.com (Simon Désaulniers)</managingEditor>
    <webMaster>sim.desaulniers@gmail.com (Simon Désaulniers)</webMaster>
    <copyright>©2020 Simon Désaulniers, All Rights Reserved</copyright>
    <lastBuildDate>Fri, 16 Oct 2020 01:17:31 -0400</lastBuildDate>
    
        <atom:link href="https://sim590.github.io/fr/categories/monade/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>La monade Maybe</title>
        <link>https://sim590.github.io/fr/haskell/monademaybe/</link>
        <pubDate>Fri, 16 Oct 2020 01:17:31 -0400</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Fri, 16 Oct 2020 01:17:31 -0400</atom:modified>
        <guid>https://sim590.github.io/fr/haskell/monademaybe/</guid>
        <description>&lt;p&gt;Dans cet article, je souhaite introduire le programmeur à la monade &lt;code&gt;Maybe&lt;/code&gt;. Je
compte le faire en utilisant le langage Haskell puisqu&amp;rsquo;il s&amp;rsquo;agit du langage
fonctionnel que je maîtrise le mieux et que je le considère très expressif et
accessible. Afin de démontrer les bénéfices de la monade et des concepts
d&amp;rsquo;Haskell, je vais comparer ceux-ci aux méthodes usuelles du langage C++.&lt;/p&gt;
&lt;p&gt;En une phrase, la monade &lt;code&gt;Maybe&lt;/code&gt; peut être vue comme un &lt;em&gt;design pattern&lt;/em&gt; de
gestion des cas d&amp;rsquo;erreur ou d&amp;rsquo;exception. Je vais donc utiliser un exemple fictif
et peu réaliste, mais simple, qui permet de capturer l&amp;rsquo;idée générale. Disons
qu&amp;rsquo;on a une liste de contacts pour lesquels on souhaite exécuter un traitement.
Cependant, on décide que, dans la région du programme où on implémente le code
associé à cette liste de contact, une opération qui échoue sur un contact
devrait arrêter le fil d&amp;rsquo;exécution du programme.&lt;/p&gt;</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.io/images/haskell.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Maybe</category>
            
          
            
              <category>Monad</category>
            
          
            
              <category>Gestion d&#39;erreurs</category>
            
          
            
              <category>Générécité</category>
            
          
        
        
          
            
              <category>Haskell</category>
            
          
            
              <category>Programmation</category>
            
          
            
              <category>Monade</category>
            
          
        
        
      </item>
      

    
  </channel>
</rss>
