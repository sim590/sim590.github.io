<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Simon Désaulniers</title>
    <link>https://sim590.github.io/fr/</link>
    <description>Recent content on Simon Désaulniers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <managingEditor>sim.desaulniers@gmail.com (Simon Désaulniers)</managingEditor>
    <webMaster>sim.desaulniers@gmail.com (Simon Désaulniers)</webMaster>
    <copyright>©2020 Simon Désaulniers, All Rights Reserved</copyright>
    <lastBuildDate>Thu, 29 Dec 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://sim590.github.io/fr/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      

      
      <item>
        <title>Contrôle intégré de MPD sur la Steam Deck</title>
        <link>https://sim590.github.io/fr/steamdeck/mpd-music-control/</link>
        <pubDate>Thu, 29 Dec 2022 00:00:00 +0000</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Thu, 29 Dec 2022 00:00:00 +0000</atom:modified>
        <guid>https://sim590.github.io/fr/steamdeck/mpd-music-control/</guid>
        <description>En tant que vétéran (GNU)Linux aguerri et de fan de technos libres, je me suis donné l&amp;rsquo;occasion de me prêter à l&amp;rsquo;exercice de plusieurs programmes dont j&amp;rsquo;ai développé une dépendance avec certains d&amp;rsquo;eux, et avec raison. C&amp;rsquo;est le cas du programme MPD (Music Player Daemon) qui est un programme de lecture de musique roulant en mode serveur. On l&amp;rsquo;utilise donc normalement en pair avec un client comme mpdevil. Personnellement, j&amp;rsquo;utilise ncmpcpp et il y a une longue liste de clients pour MPD avec des fonctionnalités variées.</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.ioimages/steamdeck/mpd/mpd.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Steam Deck</category>
            
          
            
              <category>mpd</category>
            
          
            
              <category>MusicControl</category>
            
          
            
              <category>Decky</category>
            
          
            
              <category>Greffon</category>
            
          
        
        
          
            
              <category>Techno</category>
            
          
        
        
      </item>
      
      <item>
        <title>Transformer sa Steam Deck en Chromecast?</title>
        <link>https://sim590.github.io/fr/steamdeck/serveur-mpv/</link>
        <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Sun, 09 Oct 2022 00:00:00 +0000</atom:modified>
        <guid>https://sim590.github.io/fr/steamdeck/serveur-mpv/</guid>
        <description>J&amp;rsquo;avais commandé une Steam Deck, un terminal mobile (selon la traduction de l&amp;rsquo;OQLF) basé sur Archlinux, dès le moment que j&amp;rsquo;ai appris l&amp;rsquo;existence de ce projet par Valve. Ce terminal mobile est en fait un ordinateur complet ayant comme principale fonction de fournir une plateforme de jeu portable, mais en réalité il permet une panoplie de choses qui la rend capable de surpasser la compétition.
Pourquoi ? Pour plusieurs raisons, mais principalement parce que je crois que c&amp;rsquo;est un appareil qui jouera un rôle central dans le cheminement de GNU/Linux vers un statut de système plus populaire chez les gens moins techniques et non initiés.</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.ioimages/steamdeck/mpv/mpv.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Steam Deck</category>
            
          
            
              <category>mpv</category>
            
          
        
        
          
            
              <category>Techno</category>
            
          
        
        
      </item>
      
      <item>
        <title>Transformateurs: composition de monades</title>
        <link>https://sim590.github.io/fr/haskell/transformateurs/</link>
        <pubDate>Fri, 23 Jul 2021 04:03:00 -0400</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Fri, 23 Jul 2021 04:03:00 -0400</atom:modified>
        <guid>https://sim590.github.io/fr/haskell/transformateurs/</guid>
        <description>Dès lors qu&amp;rsquo;on découvre les monades et leur utilité, on ne peut faire autrement que de les étudier davantage et trouver les occasions pour les utiliser. Après tout, ils sont des concepts clefs dans l&amp;rsquo;utilisation sérieuse d&amp;rsquo;un langage fonctionnel comme Haskell. Par exemple, on ne peut pas faire d&amp;rsquo;opérations d&amp;rsquo;entrée/sortie si on ne fonctionne pas dans la monade IO.
Une limitation importante prend forme très rapidement sous nos yeux: il devient difficile d&amp;rsquo;utiliser plusieurs monades ensembles car on doit forcément les développer pour passer d&amp;rsquo;une monade à l&amp;rsquo;autre.</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.ioimages/haskell.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Transformateur</category>
            
          
            
              <category>Monade</category>
            
          
            
              <category>Composition</category>
            
          
        
        
          
            
              <category>Haskell</category>
            
          
            
              <category>Programmation</category>
            
          
        
        
      </item>
      
      <item>
        <title>La monade Maybe</title>
        <link>https://sim590.github.io/fr/haskell/monademaybe/</link>
        <pubDate>Fri, 16 Oct 2020 01:17:31 -0400</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Fri, 16 Oct 2020 01:17:31 -0400</atom:modified>
        <guid>https://sim590.github.io/fr/haskell/monademaybe/</guid>
        <description>Dans cet article, je souhaite introduire le programmeur à la monade Maybe. Je compte le faire en utilisant le langage Haskell puisqu&amp;rsquo;il s&amp;rsquo;agit du langage fonctionnel que je maîtrise le mieux et que je le considère très expressif et accessible. Afin de démontrer les bénéfices de la monade et des concepts d&amp;rsquo;Haskell, je vais comparer ceux-ci aux méthodes usuelles du langage C++.
En une phrase, la monade Maybe peut être vue comme un design pattern de gestion des cas d&amp;rsquo;erreur ou d&amp;rsquo;exception.</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.ioimages/haskell.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Maybe</category>
            
          
            
              <category>Monad</category>
            
          
            
              <category>Gestion d&#39;erreurs</category>
            
          
            
              <category>Générécité</category>
            
          
        
        
          
            
              <category>Haskell</category>
            
          
            
              <category>Programmation</category>
            
          
            
              <category>Monade</category>
            
          
        
        
      </item>
      
      <item>
        <title>Calculs hypothécaires</title>
        <link>https://sim590.github.io/fr/maths/calculs-hypothecaires/</link>
        <pubDate>Fri, 31 Jul 2020 21:18:20 -0400</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Fri, 31 Jul 2020 21:18:20 -0400</atom:modified>
        <guid>https://sim590.github.io/fr/maths/calculs-hypothecaires/</guid>
        <description>Je regarde les maisons et condos depuis un certain temps déjà, histoire de sentir un peu ce que l&amp;rsquo;achat implique pour un emprunteur. J&amp;rsquo;ai pris la peine de rechercher différentes informations comme les conditions et les options pour une assurance hypothèque, les frais associés à l&amp;rsquo;habitation (charge de copropriété, taxe scolaire, etc.) ainsi que les taux d&amp;rsquo;intérêt associés à un prêt. J&amp;rsquo;ai donc voulu mettre tout cela en commun afin d&amp;rsquo;avoir un aperçu de mes paiements par mois ainsi que ce que cela engendre sur une période plus longue comme 5, 10 ou même 25 ans.</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.ioimages/maths/newton.jpg" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Hypothèque</category>
            
          
            
              <category>Prêt</category>
            
          
            
              <category>Dette</category>
            
          
            
              <category>Intérêt</category>
            
          
            
              <category>Paiement bancaire</category>
            
          
            
              <category>Newton</category>
            
          
            
              <category>Pascal</category>
            
          
        
        
          
            
              <category>Mathématiques</category>
            
          
            
              <category>Finance</category>
            
          
        
        
      </item>
      
      <item>
        <title>Debian: passer à «testing»</title>
        <link>https://sim590.github.io/fr/debian/passer-%C3%A0-testing/</link>
        <pubDate>Sat, 09 May 2020 20:36:40 -0400</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Sat, 09 May 2020 20:36:40 -0400</atom:modified>
        <guid>https://sim590.github.io/fr/debian/passer-%C3%A0-testing/</guid>
        <description>Debian est une des distributions de GNU/Linux les plus communes et robustes grâce à son système de publication de version structuré et méticuleux. Les versions passent par différents stades de développement appelés «branches». On peut voir ces branches comme des «versions» de Debian qui ne sont pas figées dans le temps contrairement aux publications de Debian. Par exemple, Buster est le nom de la dernière version publiée par Debian à ce jour et la branche correspondant à Debian est appelée stable.</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.ioimages/debian/Debian_logo.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>GNU/Linux</category>
            
          
            
              <category>Aptitude</category>
            
          
            
              <category>Paquet Debian</category>
            
          
            
              <category>Branche Debian</category>
            
          
        
        
          
            
              <category>Debian</category>
            
          
            
              <category>Techno</category>
            
          
        
        
      </item>
      
      <item>
        <title>fzf: comment optimiser son utilisation de la ligne de commande</title>
        <link>https://sim590.github.io/fr/outils/fzf/</link>
        <pubDate>Sat, 11 Apr 2020 00:42:27 -0400</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Sat, 11 Apr 2020 00:42:27 -0400</atom:modified>
        <guid>https://sim590.github.io/fr/outils/fzf/</guid>
        <description>fzf est un programme filtrant le flux de son entrée standard par mots clefs fournis par l&amp;rsquo;utilisateur de manière interactive. Le filtre est du type fuzzy (d&amp;rsquo;où le nom fzf pour fuzzy finder), c&amp;rsquo;est-à-dire que les termes fournis au programme sont décomposés en sous-mots afin de permettre des recherches approximatives par l&amp;rsquo;utilisateur. Par exemple, prenons l&amp;rsquo;entrée suivante:
1 2 3 toto titi tutu Si l&amp;rsquo;utilisateur fournissait le terme tt, toutes les lignes seraient sélectionnées, puisque les sous-mots t et t se trouvent tous deux dans toutes les lignes.</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.ioimages/fzf/fzf-logo.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>GNU/Linux</category>
            
          
            
              <category>Productivité</category>
            
          
            
              <category>Vim</category>
            
          
            
              <category>zsh</category>
            
          
            
              <category>ranger</category>
            
          
            
              <category>pass</category>
            
          
        
        
          
            
              <category>Techno</category>
            
          
            
              <category>Outil</category>
            
          
        
        
      </item>
      
      <item>
        <title>Vim peut tout faire</title>
        <link>https://sim590.github.io/fr/vim/vim-peut-tout-faire/</link>
        <pubDate>Sun, 22 Mar 2020 11:11:56 -0400</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Sun, 22 Mar 2020 11:11:56 -0400</atom:modified>
        <guid>https://sim590.github.io/fr/vim/vim-peut-tout-faire/</guid>
        <description>Vim est un éditeur de texte et clairement le meilleur qui soit. Je ne dis pas ça sans peser mes mots. Ceci dit, il ne faut pas lui prêter une identité qu&amp;rsquo;il n&amp;rsquo;a pas. Vim n&amp;rsquo;est pas un environnement de développement intégré (EDI ou IDE en anglais) complet. Cependant, plusieurs aspects à son utilisation font sa grande force pour fournir un EDI complet à son usager:
un langage de touches permettant aux doigts de faire tout le travail d&amp;rsquo;édition de texte (couper, effacer, coller, réordonner, formater, etc.</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.ioimages/vim/vim-peut-tout-faire/vim-all-the-things.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Vim</category>
            
          
            
              <category>hjkl</category>
            
          
            
              <category>greffon</category>
            
          
        
        
          
            
              <category>Techno</category>
            
          
            
              <category>Outil</category>
            
          
            
              <category>Éditeur de texte</category>
            
          
            
              <category>Programmation</category>
            
          
        
        
      </item>
      
      <item>
        <title>Comment bien assurer la vie privée du clavardage?</title>
        <link>https://sim590.github.io/fr/cybers%C3%A9curit%C3%A9/comment-bien-assurer-la-confidentialit%C3%A9-du-clavardage/</link>
        <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Mon, 09 Mar 2020 00:00:00 +0000</atom:modified>
        <guid>https://sim590.github.io/fr/cybers%C3%A9curit%C3%A9/comment-bien-assurer-la-confidentialit%C3%A9-du-clavardage/</guid>
        <description>Lorsqu&amp;rsquo;on utilise les différents outils de communications habituels de nos jours, il est commun de supposer la garantie de sa vie privée. L&amp;rsquo;utilisateur moyen ne se pose aucune question lorsqu&amp;rsquo;il se connecte à des services comme Facebook, Twitter ou Skype. Ou encore, on se rassure tout de suite à l&amp;rsquo;idée de voir des symboles de &amp;ldquo;sécurité&amp;rdquo; comme le suivant.
Tous les services susmentionnés sont effectivement munis de protections, mais contre et pour qui?</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.ioimages/chiffrement-de-bout-en-bout.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Chiffrement</category>
            
          
            
              <category>Chiffrement de bout en bout</category>
            
          
            
              <category>Confidentialité</category>
            
          
            
              <category>Signal</category>
            
          
            
              <category>WhatsApp</category>
            
          
            
              <category>Protocole</category>
            
          
            
              <category>Protocole de communication</category>
            
          
            
              <category>Communication</category>
            
          
        
        
          
            
              <category>Cybersécurité</category>
            
          
            
              <category>Cryptographie</category>
            
          
            
              <category>Vie privée</category>
            
          
        
        
      </item>
      
      <item>
        <title>Haskell: programmation dynamique</title>
        <link>https://sim590.github.io/fr/haskell/programmation-dynamique/</link>
        <pubDate>Mon, 02 Mar 2020 04:06:13 -0500</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Mon, 02 Mar 2020 04:06:13 -0500</atom:modified>
        <guid>https://sim590.github.io/fr/haskell/programmation-dynamique/</guid>
        <description>L&amp;rsquo;approche de programmation dynamique est souvent associée au remplissage d&amp;rsquo;un tableau à deux dimensions et à l&amp;rsquo;écriture explicite de ce procédé sous forme itérative. Dans un langage fonctionnel comme Haskell, on bénéficie de quelques avantages d&amp;rsquo;expressivité de haut niveau et de lisibilité qu&amp;rsquo;on ne retrouve pas autrement.
Dans cet article, je commence par explorer deux exemples triviaux de programmation dynamique. Ensuite, je passe sur un problème tout aussi accessible, mais dont l&amp;rsquo;achèvement optimal demandera l&amp;rsquo;utilisation d&amp;rsquo;une structure Data.</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.ioimages/haskell.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Séquence de Collatz</category>
            
          
            
              <category>Data.Array</category>
            
          
            
              <category>nombre triangulaire</category>
            
          
        
        
          
            
              <category>Algorithmique</category>
            
          
            
              <category>Haskell</category>
            
          
            
              <category>Mémoïsation</category>
            
          
            
              <category>Programmation</category>
            
          
            
              <category>Programmation dynamique</category>
            
          
        
        
      </item>
      
      <item>
        <title>Adieu</title>
        <link>https://sim590.github.io/fr/adieu/</link>
        <pubDate>Sun, 19 Jun 2016 21:30:22 -0400</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Sun, 19 Jun 2016 21:30:22 -0400</atom:modified>
        <guid>https://sim590.github.io/fr/adieu/</guid>
        <description>GSOC Comme j&amp;rsquo;ai mentionné dans au article antérieur, je participe au programme Google Summer Of Code grâce à l&amp;rsquo;organisation Debian qui supervise mes travaux contribuant au logiciel libre Ring.
Deux jours restants Il reste deux jours avant mon départ pour le Cape, en Afrique du sud. C&amp;rsquo;est pour assister à l&amp;rsquo;événement debconf (« Debian conference »), organisé par Debian, que je me rends là. Cet événement est organisé à chaque année et, l&amp;rsquo;année prochaine, c&amp;rsquo;est à Montréal que ça aura lieu !</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        
        
        
        
      </item>
      

    
  </channel>
</rss>