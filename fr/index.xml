<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Simon Désaulniers</title>
    <link>https://sim590.github.io/fr/</link>
    <description>Recent content on Simon Désaulniers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <managingEditor>sim.desaulniers@gmail.com (Simon Désaulniers)</managingEditor>
    <webMaster>sim.desaulniers@gmail.com (Simon Désaulniers)</webMaster>
    <copyright>©2020 Simon Désaulniers, All Rights Reserved</copyright>
    <lastBuildDate>Thu, 29 Dec 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://sim590.github.io/fr/index.xml" rel="self" type="application/rss+xml" />
    
      
      
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      

      
      <item>
        <title>Contrôle intégré de MPD sur la Steam Deck</title>
        <link>https://sim590.github.io/fr/steamdeck/mpd-music-control/</link>
        <pubDate>Thu, 29 Dec 2022 00:00:00 +0000</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Thu, 29 Dec 2022 00:00:00 +0000</atom:modified>
        <guid>https://sim590.github.io/fr/steamdeck/mpd-music-control/</guid>
        <description>&lt;p&gt;En tant que vétéran (GNU)Linux aguerri et de fan de technos libres, je me suis
donné l&amp;rsquo;occasion d&amp;rsquo;expérimenter plusieurs programmes dont j&amp;rsquo;ai développé une
dépendance avec certains d&amp;rsquo;eux, et avec raison. C&amp;rsquo;est le cas du programme MPD
(Music Player Daemon) qui est un programme de lecture de musique roulant en mode
serveur. On l&amp;rsquo;utilise donc normalement en pair avec un client comme &lt;a href=&#34;https://github.com/SoongNoonien/mpdevil&#34;&gt;mpdevil&lt;/a&gt;.
Personnellement, j&amp;rsquo;utilise &lt;a href=&#34;https://github.com/arybczak/ncmpcpp&#34;&gt;ncmpcpp&lt;/a&gt; et il y a une &lt;a href=&#34;https://www.musicpd.org/clients/&#34;&gt;longue liste de
clients&lt;/a&gt; pour MPD avec des fonctionnalités variées. Depuis que j&amp;rsquo;ai
reçu ma Steam Deck, j&amp;rsquo;ai donc bien sûr installé MPD sur celle-ci afin de pouvoir
contrôler avec mon téléphone (via &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.namelessdev.mpdroid&amp;amp;gl=US&amp;amp;pli=1&#34;&gt;MPDroid&lt;/a&gt;) la musique qui joue sur ma Steam
Deck connectée à ma télé ou à mes écouteurs Bluetooth. Par contre, je n&amp;rsquo;avais
pas encore de moyen de contrôler MPD par la Steam Deck directement autrement
qu&amp;rsquo;en utilisant une app graphique comme mpdevil, mais c&amp;rsquo;était handicapant
considérant le type de contrôle (joystick ou trackpad) à notre disposition.
Parfois, on peut se trouver à utiliser la Steam Deck avec une manette bluetooth,
donc on n&amp;rsquo;a pas envie d&amp;rsquo;une interface qui est prévue pour la souris, quand on
n&amp;rsquo;a qu&amp;rsquo;un joystick à portée de main.&lt;/p&gt;</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.io/images/steamdeck/mpd/mpd.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Steam Deck</category>
            
          
            
              <category>mpd</category>
            
          
            
              <category>MusicControl</category>
            
          
            
              <category>Decky</category>
            
          
            
              <category>Greffon</category>
            
          
        
        
          
            
              <category>Techno</category>
            
          
        
        
      </item>
      
      <item>
        <title>Transformer sa Steam Deck en Chromecast?</title>
        <link>https://sim590.github.io/fr/steamdeck/serveur-mpv/</link>
        <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Sun, 09 Oct 2022 00:00:00 +0000</atom:modified>
        <guid>https://sim590.github.io/fr/steamdeck/serveur-mpv/</guid>
        <description>&lt;p&gt;J&amp;rsquo;avais commandé une &lt;a href=&#34;https://www.steamdeck.com/fr/&#34;&gt;Steam Deck&lt;/a&gt;, un terminal mobile (selon &lt;a href=&#34;https://gdt.oqlf.gouv.qc.ca/ficheOqlf.aspx?Id_Fiche=8360495&#34;&gt;la traduction de
l&amp;rsquo;OQLF&lt;/a&gt;) basé sur &lt;a href=&#34;https://www.archlinux.org/&#34;&gt;Archlinux&lt;/a&gt;, dès le moment que j&amp;rsquo;ai appris l&amp;rsquo;existence de ce
projet par &lt;a href=&#34;https://www.valvesoftware.com/&#34;&gt;Valve&lt;/a&gt;. Ce terminal mobile est en fait un ordinateur complet ayant comme principale
fonction de fournir une plateforme de jeu portable, mais en réalité il permet une panoplie de choses
qui la rend capable de surpasser la compétition.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sim590.github.io/images/steamdeck/steamdeck.png&#34; alt=&#34;steamdeck&#34;&gt;&lt;/p&gt;
&lt;p&gt;Pourquoi ? Pour plusieurs raisons, mais principalement parce que je crois que c&amp;rsquo;est un appareil qui
jouera un rôle central dans le cheminement de GNU/Linux vers un statut de système plus populaire
chez les gens moins techniques et non initiés.&lt;/p&gt;</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.io/images/steamdeck/mpv/mpv.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Steam Deck</category>
            
          
            
              <category>mpv</category>
            
          
        
        
          
            
              <category>Techno</category>
            
          
        
        
      </item>
      
      <item>
        <title>Transformateurs: composition de monades</title>
        <link>https://sim590.github.io/fr/haskell/transformateurs/</link>
        <pubDate>Fri, 23 Jul 2021 04:03:00 -0400</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Fri, 23 Jul 2021 04:03:00 -0400</atom:modified>
        <guid>https://sim590.github.io/fr/haskell/transformateurs/</guid>
        <description>&lt;script type=&#34;text/javascript&#34;
  src=&#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;p&gt;Dès lors qu&amp;rsquo;on découvre les monades et leur utilité, on ne peut faire autrement
que de les étudier davantage et trouver les occasions pour les utiliser. Après
tout, ils sont des concepts clefs dans l&amp;rsquo;utilisation sérieuse d&amp;rsquo;un langage
fonctionnel comme Haskell. Par exemple, on ne peut pas faire d&amp;rsquo;opérations
d&amp;rsquo;entrée/sortie si on ne fonctionne pas dans la monade &lt;code&gt;IO&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Une limitation importante prend forme très rapidement sous nos yeux: il devient
difficile d&amp;rsquo;utiliser plusieurs monades ensembles car on doit forcément les
développer pour passer d&amp;rsquo;une monade à l&amp;rsquo;autre. Ce faisant, on doit choisir entre
les propriétés d&amp;rsquo;une monade ou l&amp;rsquo;autre et on ne peut donc pas bénéficier des
différents monades en même temps. Les transformateurs de monades visent
justement à régler ce problème de manière à fournir une écriture finale
satisfaisante autant au niveau sémantique que pour l&amp;rsquo;organisation logique du
code.&lt;/p&gt;</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.io/images/haskell.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Transformateur</category>
            
          
            
              <category>Monade</category>
            
          
            
              <category>Composition</category>
            
          
        
        
          
            
              <category>Haskell</category>
            
          
            
              <category>Programmation</category>
            
          
        
        
      </item>
      
      <item>
        <title>La monade Maybe</title>
        <link>https://sim590.github.io/fr/haskell/monademaybe/</link>
        <pubDate>Fri, 16 Oct 2020 01:17:31 -0400</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Fri, 16 Oct 2020 01:17:31 -0400</atom:modified>
        <guid>https://sim590.github.io/fr/haskell/monademaybe/</guid>
        <description>&lt;p&gt;Dans cet article, je souhaite introduire le programmeur à la monade &lt;code&gt;Maybe&lt;/code&gt;. Je
compte le faire en utilisant le langage Haskell puisqu&amp;rsquo;il s&amp;rsquo;agit du langage
fonctionnel que je maîtrise le mieux et que je le considère très expressif et
accessible. Afin de démontrer les bénéfices de la monade et des concepts
d&amp;rsquo;Haskell, je vais comparer ceux-ci aux méthodes usuelles du langage C++.&lt;/p&gt;
&lt;p&gt;En une phrase, la monade &lt;code&gt;Maybe&lt;/code&gt; peut être vue comme un &lt;em&gt;design pattern&lt;/em&gt; de
gestion des cas d&amp;rsquo;erreur ou d&amp;rsquo;exception. Je vais donc utiliser un exemple fictif
et peu réaliste, mais simple, qui permet de capturer l&amp;rsquo;idée générale. Disons
qu&amp;rsquo;on a une liste de contacts pour lesquels on souhaite exécuter un traitement.
Cependant, on décide que, dans la région du programme où on implémente le code
associé à cette liste de contact, une opération qui échoue sur un contact
devrait arrêter le fil d&amp;rsquo;exécution du programme.&lt;/p&gt;</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.io/images/haskell.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Maybe</category>
            
          
            
              <category>Monad</category>
            
          
            
              <category>Gestion d&#39;erreurs</category>
            
          
            
              <category>Générécité</category>
            
          
        
        
          
            
              <category>Haskell</category>
            
          
            
              <category>Programmation</category>
            
          
            
              <category>Monade</category>
            
          
        
        
      </item>
      
      <item>
        <title>Calculs hypothécaires</title>
        <link>https://sim590.github.io/fr/maths/calculs-hypothecaires/</link>
        <pubDate>Fri, 31 Jul 2020 21:18:20 -0400</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Fri, 31 Jul 2020 21:18:20 -0400</atom:modified>
        <guid>https://sim590.github.io/fr/maths/calculs-hypothecaires/</guid>
        <description>&lt;script type=&#34;text/javascript&#34;
  src=&#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;p&gt;Je regarde les maisons et condos depuis un certain temps déjà, histoire de
sentir un peu ce que l&amp;rsquo;achat implique pour un emprunteur. J&amp;rsquo;ai pris la peine de
rechercher différentes informations comme les conditions et les options pour une
assurance hypothèque, les frais associés à l&amp;rsquo;habitation (charge de copropriété,
taxe scolaire, etc.) ainsi que les taux d&amp;rsquo;intérêt associés à un prêt. J&amp;rsquo;ai donc
voulu mettre tout cela en commun afin d&amp;rsquo;avoir un aperçu de mes paiements par
mois ainsi que ce que cela engendre sur une période plus longue comme 5, 10 ou
même 25 ans. J&amp;rsquo;ai ainsi eu l&amp;rsquo;occasion de faire certains calculs qui seront
utiles à plusieurs pour comprendre comment les paiements hypothécaires sont
calculés. En particulier, je veux exposer trois calculs clefs dans la prévision
des avantages et inconvénients d&amp;rsquo;acheter une propriété versus louer un logement:&lt;/p&gt;</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.io/images/maths/newton.jpg" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Hypothèque</category>
            
          
            
              <category>Prêt</category>
            
          
            
              <category>Dette</category>
            
          
            
              <category>Intérêt</category>
            
          
            
              <category>Paiement bancaire</category>
            
          
            
              <category>Newton</category>
            
          
            
              <category>Pascal</category>
            
          
        
        
          
            
              <category>Mathématiques</category>
            
          
            
              <category>Finance</category>
            
          
        
        
      </item>
      
      <item>
        <title>Debian: passer à «testing»</title>
        <link>https://sim590.github.io/fr/debian/passer-%C3%A0-testing/</link>
        <pubDate>Sat, 09 May 2020 20:36:40 -0400</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Sat, 09 May 2020 20:36:40 -0400</atom:modified>
        <guid>https://sim590.github.io/fr/debian/passer-%C3%A0-testing/</guid>
        <description>&lt;p&gt;Debian est une des distributions de GNU/Linux les plus communes et robustes
grâce à son système de publication de version structuré et méticuleux. Les
versions passent par différents stades de développement appelés «branches». On
peut voir ces branches comme des «versions» de Debian qui ne sont pas figées
dans le temps contrairement aux publications de Debian. Par exemple, Buster est
le nom de la dernière version publiée par Debian à ce jour et la branche
correspondant à Debian est appelée &lt;code&gt;stable&lt;/code&gt;. Par défaut, il s&amp;rsquo;agit de la branche
avec laquelle Debian s&amp;rsquo;installe. Comme le système de paquetage inclut d&amp;rsquo;abord
les paquets dans la branche &lt;code&gt;unstable&lt;/code&gt;, puis &lt;code&gt;testing&lt;/code&gt; et finalement &lt;code&gt;stable&lt;/code&gt;,
les versions prennent un certains temps à aboutir. Ce faisant, ceci garantie une
stabilité aux utilisateurs (d&amp;rsquo;où le nom de la branche). Ceci dit, certains
utilisateurs plus avancés ayant le désir d&amp;rsquo;un système plus à jour peuvent
configurer leur système afin que celui-ci passe à &lt;code&gt;testing&lt;/code&gt;. Ce processus est
très commun parmi les utilisateurs avancés et comporte pratiquement très peu
d&amp;rsquo;inconvénients. Pour plus d&amp;rsquo;information par rapport aux branches, voyez les
différents liens ci-après:&lt;/p&gt;</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.io/images/debian/Debian_logo.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>GNU/Linux</category>
            
          
            
              <category>Aptitude</category>
            
          
            
              <category>Paquet Debian</category>
            
          
            
              <category>Branche Debian</category>
            
          
        
        
          
            
              <category>Debian</category>
            
          
            
              <category>Techno</category>
            
          
        
        
      </item>
      
      <item>
        <title>fzf: comment optimiser son utilisation de la ligne de commande</title>
        <link>https://sim590.github.io/fr/outils/fzf/</link>
        <pubDate>Sat, 11 Apr 2020 00:42:27 -0400</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Sat, 11 Apr 2020 00:42:27 -0400</atom:modified>
        <guid>https://sim590.github.io/fr/outils/fzf/</guid>
        <description>&lt;p&gt;&lt;code&gt;fzf&lt;/code&gt; est un programme filtrant le flux de son entrée standard par mots clefs
fournis par l&amp;rsquo;utilisateur de manière interactive. Le filtre est du type &lt;em&gt;fuzzy&lt;/em&gt;
(d&amp;rsquo;où le nom &lt;em&gt;fzf&lt;/em&gt; pour &lt;em&gt;fuzzy finder&lt;/em&gt;), c&amp;rsquo;est-à-dire que les termes fournis au
programme sont décomposés en sous-mots afin de permettre des recherches
approximatives par l&amp;rsquo;utilisateur. Par exemple, prenons l&amp;rsquo;entrée suivante:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;toto
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;titi
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tutu
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Si l&amp;rsquo;utilisateur fournissait le terme &lt;code&gt;tt&lt;/code&gt;, toutes les lignes seraient
sélectionnées, puisque les sous-mots &lt;code&gt;t&lt;/code&gt; et &lt;code&gt;t&lt;/code&gt; se trouvent tous deux dans
toutes les lignes. Cependant, avec le terme de recherche &lt;code&gt;oo&lt;/code&gt;, seul la première
ligne correspondrait avec le mot &lt;code&gt;toto&lt;/code&gt; selon le même raisonnement.&lt;/p&gt;</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.io/images/fzf/fzf-logo.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>GNU/Linux</category>
            
          
            
              <category>Productivité</category>
            
          
            
              <category>Vim</category>
            
          
            
              <category>zsh</category>
            
          
            
              <category>ranger</category>
            
          
            
              <category>pass</category>
            
          
        
        
          
            
              <category>Techno</category>
            
          
            
              <category>Outil</category>
            
          
        
        
      </item>
      
      <item>
        <title>Vim peut tout faire</title>
        <link>https://sim590.github.io/fr/vim/vim-peut-tout-faire/</link>
        <pubDate>Sun, 22 Mar 2020 11:11:56 -0400</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Sun, 22 Mar 2020 11:11:56 -0400</atom:modified>
        <guid>https://sim590.github.io/fr/vim/vim-peut-tout-faire/</guid>
        <description>&lt;p&gt;Vim est un &lt;a href=&#34;https://fr.wikipedia.org/wiki/%C3%89diteur_de_texte&#34;&gt;éditeur de texte&lt;/a&gt; et clairement le meilleur qui soit. Je ne
dis pas ça sans peser mes mots. Ceci dit, il ne faut pas lui prêter une identité
qu&amp;rsquo;il n&amp;rsquo;a pas. Vim n&amp;rsquo;est pas un environnement de développement intégré (EDI ou
IDE en anglais) complet.  Cependant, plusieurs aspects à son utilisation font sa
grande force pour fournir un EDI complet à son usager:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;un &lt;strong&gt;langage de touches&lt;/strong&gt; permettant aux doigts de faire tout le travail
d&amp;rsquo;édition de texte (couper, effacer, coller, réordonner, formater, etc.). En
effet, dans une boîte de texte régulière (comme ce qu&amp;rsquo;on trouve dans les EDIs
populaires) la modification de texte, et non la simple écriture, n&amp;rsquo;est pas
chose facile. Elle demande souvent l&amp;rsquo;utilisation de la souris, donc la perte
de la position des mains déjà en place pour écrire. De plus, cette approche
est normalement très lente. Avec Vim, les doigts font le travail. La meilleure
comparaison pour comprendre le sentiment est justement celle de l&amp;rsquo;écriture. On
ne pense pas à trouver les touches pour écrire et cela se fait
automatiquement. Pour la modification de texte avec Vim, c&amp;rsquo;est la même chose.&lt;/li&gt;
&lt;li&gt;un &lt;strong&gt;langage de script&lt;/strong&gt; (&lt;em&gt;VimScript&lt;/em&gt;) qui lui permet une haute extensibilité;&lt;/li&gt;
&lt;li&gt;une &lt;strong&gt;intégration de l&amp;rsquo;interface système&lt;/strong&gt; (IS ou le &lt;em&gt;shell&lt;/em&gt; en anglais).
L&amp;rsquo;utilisation de l&amp;rsquo;IS est entièrement intégrée à travers VimScript ainsi que
les différents modes de Vim (Normal, Visual, CMD, etc.). Je ne peux mettre
assez l&amp;rsquo;accent sur comment ce trait de Vim est &lt;strong&gt;si significatif&lt;/strong&gt;. Ce
faisant, de manière totalement gratuite, un utilisateur de Vim bénéficie déjà
des fonctionnalités de l&amp;rsquo;IS dans son éditeur de texte sans avoir recours à
l&amp;rsquo;installation très particulière d&amp;rsquo;extension par son EDI. On dit souvent que
l&amp;rsquo;IS constitue en réalité l&amp;rsquo;environnement de développement d&amp;rsquo;un utilisateur de
Vim.&lt;/li&gt;
&lt;li&gt;une capacité d&amp;rsquo;intégrer des &lt;strong&gt;greffons&lt;/strong&gt; (&lt;em&gt;plugins&lt;/em&gt; en anglais);&lt;/li&gt;
&lt;li&gt;et une &lt;strong&gt;communauté de développeurs&lt;/strong&gt; très investie dans le partage de code et
d&amp;rsquo;outils qui rendent l&amp;rsquo;intégration d&amp;rsquo;outils de développement aisée et
facilement personnalisable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Le tout fait de Vim le choix idéal. Dans ce qui suit, je prends le temps de
développer concrètement mon point de vue en m&amp;rsquo;attardant à des préoccupations
très importantes de tout développeur, mais selon ma perspective, bien entendu.
Je compte donc explorer le mode Normal de Vim, l&amp;rsquo;intégration avec l&amp;rsquo;IS plus en
détail, l&amp;rsquo;intégration de &lt;a href=&#34;https://fr.wikipedia.org/wiki/GNU_Debugger&#34;&gt;GDB&lt;/a&gt; (depuis Vim 8) et les différents greffons
permettant une sensation d&amp;rsquo;EDI complet.&lt;/p&gt;</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.io/images/vim/vim-peut-tout-faire/vim-all-the-things.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Vim</category>
            
          
            
              <category>hjkl</category>
            
          
            
              <category>greffon</category>
            
          
        
        
          
            
              <category>Techno</category>
            
          
            
              <category>Outil</category>
            
          
            
              <category>Éditeur de texte</category>
            
          
            
              <category>Programmation</category>
            
          
        
        
      </item>
      
      <item>
        <title>Comment bien assurer la vie privée du clavardage?</title>
        <link>https://sim590.github.io/fr/cybers%C3%A9curit%C3%A9/comment-bien-assurer-la-confidentialit%C3%A9-du-clavardage/</link>
        <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Mon, 09 Mar 2020 00:00:00 +0000</atom:modified>
        <guid>https://sim590.github.io/fr/cybers%C3%A9curit%C3%A9/comment-bien-assurer-la-confidentialit%C3%A9-du-clavardage/</guid>
        <description>&lt;p&gt;Lorsqu&amp;rsquo;on utilise les différents outils de communications habituels de nos
jours, il est commun de supposer la garantie de sa vie privée. L&amp;rsquo;utilisateur
moyen ne se pose aucune question lorsqu&amp;rsquo;il se connecte à des services comme
Facebook, Twitter ou Skype. Ou encore, on se rassure tout de suite à l&amp;rsquo;idée de
voir des symboles de &amp;ldquo;sécurité&amp;rdquo; comme le suivant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sim590.github.io/images/chrome-s%C3%A9cu.png&#34; alt=&#34;https&#34;&gt;&lt;/p&gt;
&lt;p&gt;Tous les services susmentionnés sont effectivement munis de protections, mais
contre et pour qui? Et sous quelle(s) hypothèse(s)? Il s&amp;rsquo;avère que les mesures
de sécurité des logiciels communiquant sur les réseaux ne protègent réellement
que les entreprises derrière les services associés. La vie privée des individus
n&amp;rsquo;est, en majeure partie des cas, pas préservée d&amp;rsquo;aucune manière.&lt;/p&gt;</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.io/images/chiffrement-de-bout-en-bout.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Chiffrement</category>
            
          
            
              <category>Chiffrement de bout en bout</category>
            
          
            
              <category>Confidentialité</category>
            
          
            
              <category>Signal</category>
            
          
            
              <category>WhatsApp</category>
            
          
            
              <category>Protocole</category>
            
          
            
              <category>Protocole de communication</category>
            
          
            
              <category>Communication</category>
            
          
        
        
          
            
              <category>Cybersécurité</category>
            
          
            
              <category>Cryptographie</category>
            
          
            
              <category>Vie privée</category>
            
          
        
        
      </item>
      
      <item>
        <title>Haskell: programmation dynamique</title>
        <link>https://sim590.github.io/fr/haskell/programmation-dynamique/</link>
        <pubDate>Mon, 02 Mar 2020 04:06:13 -0500</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Mon, 02 Mar 2020 04:06:13 -0500</atom:modified>
        <guid>https://sim590.github.io/fr/haskell/programmation-dynamique/</guid>
        <description>&lt;script type=&#34;text/javascript&#34;
  src=&#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;p&gt;L&amp;rsquo;approche de programmation dynamique est souvent associée au remplissage d&amp;rsquo;un
tableau à deux dimensions et à l&amp;rsquo;écriture explicite de ce procédé sous forme
itérative. Dans un langage fonctionnel comme Haskell, on bénéficie de quelques
avantages d&amp;rsquo;expressivité de haut niveau et de lisibilité qu&amp;rsquo;on ne retrouve pas
autrement.&lt;/p&gt;
&lt;p&gt;Dans cet article, je commence par explorer deux exemples triviaux de
programmation dynamique. Ensuite, je passe sur un problème tout aussi
accessible, mais dont l&amp;rsquo;achèvement optimal demandera l&amp;rsquo;utilisation d&amp;rsquo;une
structure &lt;code&gt;Data.Array&lt;/code&gt; plutôt que la liste conventionnelle.&lt;/p&gt;</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        <media:content url="https://sim590.github.io/images/haskell.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Séquence de Collatz</category>
            
          
            
              <category>Data.Array</category>
            
          
            
              <category>nombre triangulaire</category>
            
          
        
        
          
            
              <category>Algorithmique</category>
            
          
            
              <category>Haskell</category>
            
          
            
              <category>Mémoïsation</category>
            
          
            
              <category>Programmation</category>
            
          
            
              <category>Programmation dynamique</category>
            
          
        
        
      </item>
      
      <item>
        <title>Adieu</title>
        <link>https://sim590.github.io/fr/adieu/</link>
        <pubDate>Sun, 19 Jun 2016 21:30:22 -0400</pubDate>
        <author>sim.desaulniers@gmail.com (Simon Désaulniers)</author>
        <atom:modified>Sun, 19 Jun 2016 21:30:22 -0400</atom:modified>
        <guid>https://sim590.github.io/fr/adieu/</guid>
        <description>&lt;div style=&#34;text-align:center&#34;&gt; &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pZpTXJap6Fg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt; &lt;/div&gt;
&lt;h2 id=&#34;gsoc&#34;&gt;GSOC&lt;/h2&gt;
&lt;p&gt;Comme j&amp;rsquo;ai mentionné dans au &lt;a href=&#34;https://sim590.github.io/en/gsoc/intro/&#34;&gt;article antérieur&lt;/a&gt;, je participe au programme &lt;a href=&#34;https://developers.google.com/open-source/gsoc/&#34;&gt;Google
Summer Of Code&lt;/a&gt; grâce à l&amp;rsquo;organisation &lt;a href=&#34;https://debian.org&#34;&gt;Debian&lt;/a&gt; qui supervise mes travaux
contribuant au logiciel libre &lt;a href=&#34;https://ring.cx&#34;&gt;Ring&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;deux-jours-restants&#34;&gt;Deux jours restants&lt;/h2&gt;
&lt;p&gt;Il reste deux jours avant mon départ pour le Cape, en Afrique du sud. C&amp;rsquo;est
pour assister à l&amp;rsquo;événement &lt;strong&gt;&lt;a href=&#34;https://debconf16.debconf.org/&#34;&gt;debconf&lt;/a&gt;&lt;/strong&gt; (« Debian conference »), organisé par
Debian, que je me rends là.  Cet événement est organisé à chaque année et,
l&amp;rsquo;année prochaine, c&amp;rsquo;est à Montréal que ça aura lieu ! &lt;img src=&#34;https://sim590.github.io/images/quebec.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
        
        <dc:creator>Simon Désaulniers</dc:creator>
        
        
        
        
        
        
      </item>
      

    
  </channel>
</rss>
