[{"content":"My name is Simon DÃ©saulniers. I am a person who works in my daily life in math and computer science. I am interested in several subjects such as:\n algorithmics; computer languages; IT security and cryptography; computer software and tools; distributed systems; free and privacy-friendly software; algebra; etc.  My interests go beyond computer science and math, of course. I particularly like languages, culture, music, politics and video games.\nThe content of my website On this website, I expose different concepts, notions or practices on different subjects. I like to share my discoveries, problem solving and analyzes. I hope to allow many to get out of this something useful or at least interesting. I am a user of free software and in particular GNU/Linux since 2012. It is therefore possible that subjects related to this are exploited.\n","description":"","id":7,"section":"","tags":null,"title":"About me","uri":"https://sim590.github.io/en/about/"},{"content":"  The Google Summer of Code is now over. It has been a great experience and I\u0026rsquo;m very glad I\u0026rsquo;ve been able to make it. I\u0026rsquo;ve had the pleasure to contribute to a project showing very good promise for the future of communication: Ring. The words \u0026ldquo;privacy\u0026rdquo; and \u0026ldquo;freedom\u0026rdquo; in terms of technologies are being more and more present in the mind of people. All sorts of projects wanting to achieve these goals are coming to life each days like decentralized web networks (ZeroNet for e.g.), blockchain based applications, etc.\nDebian I\u0026rsquo;ve had the great opportunity to go to the Debian Conference 2016. I\u0026rsquo;ve been introduced to the debian community and debian developpers (\u0026ldquo;dd\u0026rdquo; in short :p). I was lucky to meet with great people like the president of the FSF, John Sullivan. You can have a look at my Debian conference report here.\nIf you want to read my debian reports, you can do so by browsing the \u0026ldquo;Google Summer Of Code\u0026rdquo; category on this blog.\nWhat I have done Ring is now in official debian repositories since June 30th. This is a good news for the GNU/Linux community. I\u0026rsquo;m proud to say that I\u0026rsquo;ve been able to contribute to debian by working on OpenDHT and developing new functionalities to reduce network traffic. The goal behind this was to finally optimize the data persistence traffic consumption on the DHT.\nGithub repository: https://github.com/savoirfairelinux/opendht\nQueries Issues:\n #43: DHT queries  Pull requests:\n #79: [DHT] Queries: remote values filtering 93: dht: return consistent query from local storage #106: [dht] rework get timings after queries in master  Value pagination Issues:\n #71: [DHT] value pagination  Pull requests:\n #110: dht: Value pagination using queries #113: dht: value pagination fix  Indexation (feat. Nicolas Reynaud) Pull requests:\n #77: pht: fix invalid comparison, inexact match lookup #78: [PHT] Key consistency  General maintenance of OpenDHT Issues:\n #72: Packaging issue for Python bindings with CMake: $DESTDIR not honored #75: Different libraries built with Autotools and CMake #87: OpenDHT does not build on armel #92: [DhtScanner] doesn\u0026rsquo;t compile on LLVM 7.0.2 #99: 0.6.2 filenames in 0.6.3  Pull requests:\n #73: dht: consider IPv4 or IPv6 disconnected on operation done #74: [packaging] support python installation with make DESTDIR=$DIR #84: [dhtnode] user experience #94: dht: make main store a vector\u0026lt;unique_ptr\u0026gt; #94: autotools: versionning consistent with CMake #103: dht: fix sendListen loop bug #106: dht: more accurate name for requested nodes count #108: dht: unify bootstrapSearch and refill method using node cache  View by commits You can have a look at my work by commits just by clicking this link: https://github.com/savoirfairelinux/opendht/commits/master?author=sim590\nWhat\u0026rsquo;s left to be done Data persistence The only thing left before achieving the totality of my work is to rigorously test the data persistence behavior to demonstrate the network traffic reduction. To do so we use our benchmark python module. We are able to analyse traffic and produce plots like this one:\nPlot: 32 nodes, 1600 values with normal condition test.  This particular plot was drawn before the enhancements. We are confident to improve the results using my work produced during the GSOC.\nTCP In the middle of the GSOC, we soon realized that passing from UDP to TCP would ask too much efforts in too short lapse of time. Also, it is not yet clear if we should really do that.\n","description":"","id":9,"section":"gsoc","tags":null,"title":"[GSOC] Final report","uri":"https://sim590.github.io/en/gsoc/final/"},{"content":"Week 10 \u0026amp; 11 During these two weeks, I\u0026rsquo;ve worked hard on paginating values on the DHT.\nValue pagination As explained on my post on data persistence, we\u0026rsquo;ve had network traffic issues. The solution we have found for this is to use the queries (see also this) to filter data on the remote peer we\u0026rsquo;re communicating with. The queries let us select fields of a value instead of fetching whole values. This way, we can fetch values with unique ids. The pagination is the process of first selecting all value ids for a given hash, then making a separate \u0026ldquo;get\u0026rdquo; request packet for each of the values.\n This feature makes the DHT more friendly with UDP. In fact, UDP packets can be dropped when of size greater than the UDP MTU. Paginating values will help this as all UDP packets will now contain only one value.\n #71 #110 #113  Week 12 I\u0026rsquo;ve been working on making the \u0026ldquo;put\u0026rdquo; request lighter, again using queries. This is a key feature which will make it possible to enable data persistence. In fact, it enables us to send values to a peer only if it doesn\u0026rsquo;t already have the value we\u0026rsquo;re announcing. This will substantially reduce the overall traffic. This feature is still being tested. The last thing I have to do is to demonstrate the reduction of network traffic.\n","description":"Jet lag \u0026 PHT","id":10,"section":"gsoc","tags":null,"title":"[GSOC] Week 10\u002611\u002612 Report","uri":"https://sim590.github.io/en/gsoc/week10-11-12/"},{"content":"Week 8 This particular week has been tiresome as I did catch a cold ;). I did come back from Cape Town where debconf taking place. My arrival at Montreal was in the middle of the week, so this week is not plenty of news\u0026hellip;\nWhat I\u0026rsquo;ve done I have synced myself with my coworker Nicolas Reynaud, who\u0026rsquo;s working on building the indexation system over the DHT. We have worked together on critical algorithms: concurrent maintenance of data in the trie (PHT).\nWeek 9 What I\u0026rsquo;ve done Since my mentor, who\u0026rsquo;s also the main author of OpenDHT, was gone for presenting Ring at the RMLL, I\u0026rsquo;ve been attributed tasks that needed attention quickly. I\u0026rsquo;ve been working on making OpenDHT run properly when compiled with some failing version of Apple\u0026rsquo;s LLVM. I\u0026rsquo;ve had the pleasure of debugging obscure runtime errors that you don\u0026rsquo;t get depending on the compiler you use, but I mean very obscure.\n I have released OpenDHT 0.6.2! This release was meant to fix a critical functionality bug that would arise if one of the two routing table (IPv4, IPv6) was empty. This was really critical for Ring to have the 0.6.2 version because it is not rare that a user connects to some router not giving IPv6 address.\nFinally, I have fixed some minor bugs in my work on the queries.\n","description":"Jet lag \u0026 PHT","id":11,"section":"gsoc","tags":null,"title":"[GSOC] Week 8\u00269 Report","uri":"https://sim590.github.io/en/gsoc/week89/"},{"content":"During week 5, 6 and 7, I have been to the debian conference 2016. It was really interesting meeting with a lot of people all so involved in Debian.\nKey signing party Each year, this is a really important tradition: people gather together and exchange GPG public key fingerprint and sign each other\u0026rsquo;s keys. This contributes greatly to the growth of the web of trust.\n I did exchange public key fingerprint with others. It was the first opportunity become more connected in the PGP web of trust. I think this is something that needs to make its way to the less technical people so that everyone can benefit from the network privacy features. There is support for some mail clients like Thunderbird, but I think there is still work to do there and mostly there is work to do about the opinion or point of view people have about encryption ; people don\u0026rsquo;t care enough and they don\u0026rsquo;t really know what encryption can do for them (digital signature, trust and privacy).\nRing now part of Debian During the first week at debcamp, Alexandre Viau, an employee at Savoir-Faire Linux and a also a Debian developer (DD for short), has packaged Ring for Debian. Users can now install Ring like so:\n1  $ sudo apt-get install ring   This is an important moment as more people are now going to easily try Ring and potentially contribute to it.\nPresentating Ring Alexandre Viau and I have been thinking about presenting Ring at debconf 2016. We finally did it.\nYour browser does not support the video tag.   ","description":"Debconf 2016","id":12,"section":"gsoc","tags":null,"title":"[GSOC] Week 5\u00266\u00267 Report","uri":"https://sim590.github.io/en/gsoc/week567/"},{"content":"I have finally made a version of the queries code that can viably be integrated into the master branch of OpenDHT. I am awaiting my mentor\u0026rsquo;s approval and/or comments.\nWhat\u0026rsquo;s done Queries. The library will provide the additional following functions in its API:\n1 2  void get(InfoHash id, GetCallbackSimple cb, DoneCallback donecb={}, Value::Filter f = Value::AllFilter(), Where w = {}) { void query(const InfoHash\u0026amp; hash, QueryCallback cb, DoneCallback done_cb = {}, Query q = {});   The structure Where in the first signature will allow the user to narrow the set of values received through the network those that verify the \u0026ldquo;where\u0026rdquo; statement. The Where actually encapsulates a statement of the following SQL-ish form: SELECT * WHERE \u0026lt;some_field\u0026gt;=\u0026lt;some_field_value\u0026gt;.\nAlso, the DhtRunner::query function will let the user do something similar to what\u0026rsquo;s explained in the last paragraph, but where the returned data is encapsulated in FieldValueIndex structure instead of Value. This structure has a std::map\u0026lt;Value::Field, FieldValue\u0026gt;. You can think of the FieldValueIndex as a subset of fields of a given Value. The Query structure then allows you to create both Select and Where \u0026ldquo;statements\u0026rdquo;.\nWhat\u0026rsquo;s next  Value pagination. I have begun working on this and I now have a more clear idea of the first step to accomplish. I have to redesign the \u0026lsquo;get\u0026rsquo; operation callbacks calling process by making a callback execution per SearchNode instead of per Search (list of SearchNode). This will let us properly write the value pagination code with node concurrency in mind. This will therefor make sure we don\u0026rsquo;t request a value from a node if it doesn\u0026rsquo;t stores it; Optimizing announce operations;  ","description":"","id":13,"section":"gsoc","tags":null,"title":"[GSOC] Week 3\u00264 Report","uri":"https://sim590.github.io/en/gsoc/week34/"},{"content":"I\u0026rsquo;ve been reworking the code for the queries I introduced in the first week.\nWhat\u0026rsquo;s done  I have worked on value pagination and optimization of announce operations; Fixed bugs like #72, #73; I\u0026rsquo;ve split the Query into Select and Where strcutures. This change was explained here.  What\u0026rsquo;s still work in progress  Value pagination; Optimizing announce operations;  ","description":"","id":14,"section":"gsoc","tags":null,"title":"[GSOC] Week 2 - Report","uri":"https://sim590.github.io/en/gsoc/week2/"},{"content":"I have been working on writing serializable structure for remote filtering of values on the distributed hash table OpenDHT. This structure is called Query.\nWhat\u0026rsquo;s done The implementation of the base design with other changes have been made. You can see evolution on the matter here;\nChanges allow to create a Query with a SQL-ish statement like the following\n1  Query q(\u0026#34;SELECT * WHERE id=5\u0026#34;);   You can then use this query like so\n1  get(hash, getcb, donecb, filter, \u0026#34;SELECT * WHERE id=5\u0026#34;);   I verified the working state of the code with the dhtnode. I have also done some tests using our python benchmark scripts.\nWhat\u0026rsquo;s next  Value pagination; Optimization of put operations with query for ids before put, hence avoiding potential useless traffic.  Thoughts The Query is the key part for optimizing my initial work on data persistence on the DHT. It will enhance the DHT on more than one aspects. I have to point out it would not have been possible to do that before our major refactoring we introduced in 0.6.0.\n","description":"","id":15,"section":"gsoc","tags":null,"title":"[GSOC] Week 1 - Report","uri":"https://sim590.github.io/en/gsoc/week1/"},{"content":"I am part of the group of students working with the Debian organization. You can see my profile on the Debian wiki here.\nImproving distributed and secure communication using free software This the title of my project for this summer. It sounds good, but what am I going to really do? Well, since I\u0026rsquo;m a student at UniversitÃ© du QuÃ©bec Ã  MontrÃ©al, I have had the opportunity to meet with the company Savoir-Faire Linux in Montreal last year and that\u0026rsquo;s when I found out about their exciting project: Ring.\n Ring is one of the few projects which bring communication confidentiality and freedom in the hands of the users.\nOpenDHT Ring is divided in multiple components as explained here: https://ring.cx/en/about/technical. The component I work on is called OpenDHT. This is the distributed hash table which enables Ring users to communicate in a decentralized network.\nI have already been working on this project for a year now, so you won\u0026rsquo;t see me posting reports where I say I have to find my way around in this project. In fact, I have contributed to rewriting a major part of the code for better maintainability.\nIn the begining of last summer, I was able to be part of a research association between Savoir-Faire Linux and UniversitÃ© du QuÃ©bec Ã  MontrÃ©al. We have been working on adding two major features to OpenDHT.\nShort introduction to Distributed Hash Tables OpenDHT is based on the Kademlia design. If you know about DHTs, you are aware that they define the notion of distance using the XOR metric. This makes the tuple (H_n, xor) a metric space, where H_n is the space of identifier keys of length n. This way, you can find an identifier be the closest to a target hash than the rest of the nodes in the network.\n In order to find some data that is associated with some hash h, you have to find the nodes in the network for which the distance between their hash identifier and the target hash h is minimized. The group of nodes which are the closest to the target hash (OpenDHT allows up to 8 nodes) will hold data for that hash.\nData persistence Let\u0026rsquo;s say you ask a group of 8 nodes to hold some data for a hash and you want the data to hold the whole time until its expiration time as come. If the group of 8 nodes change because that for some reason those nodes leave or others just arrive and have an id that is closer to the target hash than the initial group of 8 nodes. The data would then not be found on the new group of 8 nodes. A first and simple solution was to count on the initial creator of the value to periodically announce the value to the group of 8 nodes. However, what if this node leaves? This is one of the main problem that I\u0026rsquo;ve been working on solving since 2015. A first version of this was produced on September 2015. However, we experienced traffic issues and were forced to redesign the OpenDHT network requests engine. We are presently working on adding a Query feature that would enable filtering of data on remote nodes, hence substantially lowering the overall traffic produced by a response to a \u0026lsquo;get\u0026rsquo; request.\nIndexation During the last year, I have also been working on the design of a solution for the use case of indexation. In a more technical way, this is the capability to find data by providing a map where its key is a string field and the mapped value is the value associated to that field, much like in a form. This could help find data for which you don\u0026rsquo;t know the hash, but you have specific information about its content. In other words, this would be a search engine for OpenDHT. I have already created a working, but still in progress, version of this. You can find it on http://opendht.net, on the index branch. Now, Nicolas Reynaud (kaldoran) is contributing to this during the GSOC.\nRoadmap As I explained on my page on the Debian Wiki, I am going to work on:\n Developing new functionalities in OpenDHT aiming at reducing overall generated traffic. Maintenance and optimization of the OpenDHT code in general. Optimizing data persistence solution over the distributed hash table. Merge (1) in the Ring daemon component in order to benefit from lower traffic in Ring. Make OpenDHT use TCP protocol instead of UDP. This is going to reduce code complexity and enhance robsutness of the DHT.  For further details, read my reports!\n","description":"","id":16,"section":"gsoc","tags":null,"title":"Google Summer Of Code","uri":"https://sim590.github.io/en/gsoc/intro/"},{"content":"So, this is how it begins I\u0026rsquo;ve been looking for a way to share thoughts about projects I had in mind, communicating how I\u0026rsquo;ve lived some experiences, or simply write down about anything. I first thought about wordpress since I\u0026rsquo;ve already used it, but I soon realised it wasn\u0026rsquo;t fit for what I wanted. I didn\u0026rsquo;t want to spend too much time thinking about how I should deploy or update my blog. I just wanted a quick and simple way to write a blog.\nHugo I first saw jekyll, and I saw how easy it was to setup and maintain. I thought: \u0026ldquo;This is just the thing I wanted!\u0026rdquo; But then, I found Hugo. Like jekyll, Hugo is a static site generator where you write your pages like the following:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  +++ date = \u0026#34;2016-05-17T23:59:14-04:00\u0026#34; title = \u0026#34;Hello World\u0026#34; description = \u0026#34;Welcome to my blog\u0026#34; +++ # So, this is how it begins  I\u0026#39;ve been looking for a way to share thoughts about projects I had in mind, communicating how I\u0026#39;ve lived some experiences, or simply write down about anything. I first thought about [wordpress][] since I\u0026#39;ve already used it, but I soon realised it wasn\u0026#39;t fit for what I wanted. I didn\u0026#39;t want to spend too much time thinking about how I should deploy or update my blog. I just wanted a quick and simple way to write a blog. ## Hugo  I first saw [jekyll](http://jekyllrb.com/), and I saw how easy it was to setup and maintain. I thought: \u0026#34;This is just the thing I wanted!\u0026#34; But then, I found **Hugo**. Like jekyll, Hugo is a static site generator where you write your pages like the following:   except that jekyll is written in ruby while Hugo is written in Go. That\u0026rsquo;s what bought me after all since it had all the features jekyll could offer me, plus I couldn\u0026rsquo;t worry about time efficiency when generating my site between two consecutive writes.\nProject tree The typical project tree looks something like this:\nâââ archetypes âââ config.toml âââ content âÂ âââ post // your posts âââ data âââ layouts âÂ âââ partials âââ static // your static files âÂ âââ css âÂ âââ img âÂ âââ js âââ themes âââ imperfect // this is the theme I chose  All of the html, css and javascript final files that the final website is composed of are going to be generated by the Hugo engine.\nConfig You have to configure your config.toml file for letting Hugo generate your website. Here\u0026rsquo;s my config file so far:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116  baseurl = \u0026#34;http://sim590.github.io\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;Simon DÃ©saulniers\u0026#34; theme = \u0026#34;imperfect\u0026#34; preserveTaxonomyNames = true paginate = 3 disqusShortname = \u0026#34;shortname\u0026#34; googleAnalytics = \u0026#34;\u0026#34; [params] # Sets the meta tag description, usually reserved for the main page description = \u0026#34;HTML5 UP theme, Future Imperfect with some extra goodies, ported by Julio Pescador. Powered by Hugo\u0026#34; # This will appear on the top left of the navigation bar navbarTitle = \u0026#34;Simon DÃ©saulniers\u0026#34; # Social media buttons that appear on the sidebar socialAppearAtTop = true socialAppearAtBottom = true # set this to the section name if section is not post #viewMorePostLink = \u0026#34;/blog/\u0026#34; # Optional Params categoriesByCount = true includeReadingTime = true # The set of favicons used are based on the write-up from this link: # https://github.com/audreyr/favicon-cheat-sheet # Please see the favicon partial template for more information loadFavicon = false faviconVersion = \u0026#34;\u0026#34; # Load custom CSS or JavaScript files. This replaces the deprecated params # minifiedFilesCSS and minifiedFilesJS. The variable is an array so that you # can load multiple files if necessary. You can also load the standard theme # files by adding the value, \u0026#34;default\u0026#34;. # customCSS = [\u0026#34;default\u0026#34;, \u0026#34;/path/to/file\u0026#34;] # customJS = [\u0026#34;default\u0026#34;, \u0026#34;/path/to/file\u0026#34;] # Loading min files for exampleSite customCSS = [\u0026#34;/css/main.min.css\u0026#34;] customJS = [\u0026#34;/js/main.min.js\u0026#34;] # parms.intro will appear on the sidebar # This is optional, but it\u0026#39;s suggested to use [params.intro] header = \u0026#34;Simon DÃ©saulniers\u0026#34; paragraph = \u0026#34;There are 10 types of people. Those who understand binary and the others.\u0026#34; about = \u0026#34;I like programming and new technologies. I like new ideas intending to bring power to the people like free distributed and secured software.\u0026#34; # This will also appear on the sidebar. # A width of less than 100px is recommended # This is optional [params.intro.pic] src = \u0026#34;/img/main/logo.png\u0026#34; # modify your picture in the shape of a circle or # future imperfect\u0026#39;s hexagonal shape circle = false imperfect = true width = \u0026#34;\u0026#34; alt = \u0026#34;Hugo Future Imperfect\u0026#34; # Adjust the amount of recent posts on the sidebar. # This is optional. The default value 5 will be used #[params.postAmount] # sidebar = 2 # Set up your menu items in the navigation bar # You can use identifier to prepend a font awesome icon to your text [[menu.main]] name = \u0026#34;Blog\u0026#34; url = \u0026#34;/post\u0026#34; identifier = \u0026#34;fa fa-newspaper-o\u0026#34; weight = 1 [[menu.main]] name = \u0026#34;Categories\u0026#34; url = \u0026#34;/categories\u0026#34; weight = 2 [[menu.main]] name = \u0026#34;About\u0026#34; url = \u0026#34;/about\u0026#34; weight = 3 # Insert your username and the icon will apear on the page as long as # socialAppearAtTop or socialAppearAtBottom is set to true in the params area # The social media icons will appear on the sidebar [social] github = \u0026#34;sim590\u0026#34; bitbucket = \u0026#34;sim590\u0026#34; jsfiddle = \u0026#34;\u0026#34; codepen = \u0026#34;\u0026#34; foursquare = \u0026#34;\u0026#34; dribbble = \u0026#34;\u0026#34; deviantart = \u0026#34;\u0026#34; behance = \u0026#34;\u0026#34; flickr = \u0026#34;\u0026#34; instagram = \u0026#34;\u0026#34; youtube = \u0026#34;\u0026#34; vimeo = \u0026#34;user51921435\u0026#34; vine = \u0026#34;\u0026#34; medium = \u0026#34;\u0026#34; wordpress = \u0026#34;\u0026#34; tumblr = \u0026#34;\u0026#34; xing = \u0026#34;\u0026#34; linkedin = \u0026#34;simon-dÃ©saulniers-86648097\u0026#34; slideshare = \u0026#34;\u0026#34; stackoverflow = \u0026#34;\u0026#34; reddit = \u0026#34;\u0026#34; pinterest = \u0026#34;\u0026#34; googleplus = \u0026#34;\u0026#34; facebook = \u0026#34;\u0026#34; facebook_admin = \u0026#34;\u0026#34; twitter_domain = \u0026#34;\u0026#34; twitter = \u0026#34;\u0026#34; email = \u0026#34;sim.desaulniers@gmail.com\u0026#34;   Exhausted I\u0026rsquo;m not much of a writer yet and this is my first post.\nTHE END\n","description":"Welcome to my blog","id":17,"section":"","tags":null,"title":"Hello World","uri":"https://sim590.github.io/en/welcome/"},{"content":"By mail (sim.desaulniers@gmail.com) or via LinkedIn.\nThe fingerprint of my PGP key:\n70B9 F71B 74C9 553D 01A1 A0EF 824A 8B97 F97E 4B08  Otherwise, simply use the following form\u0026hellip;\n","description":"Contact page","id":18,"section":"","tags":null,"title":"Contact me","uri":"https://sim590.github.io/en/contact/"}]